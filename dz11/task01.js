// Файл: event-loop.js

console.log('Старт программы'); // 1. Выполнится сразу - это синхронный код

// 2. Добавляем макрозадачу в очередь, она выполнится после всего синхронного кода и микрозадач
setTimeout(() => {
  console.log('setTimeout 1 (макрозадача)');
  
  // 7. Внутренний Promise будет обработан после выполнения текущей макрозадачи
  Promise.resolve().then(() => {
    console.log('Promise внутри setTimeout (микрозадача после макрозадачи)');
  });
  
  // 8. Вложенный setTimeout добавит новую макрозадачу в конец очереди
  setTimeout(() => {
    console.log('Вложенный setTimeout (новая макрозадача)');
  }, 0);
}, 0);

// 3. Добавляем микрозадачу в очередь микрозадач
// Микрозадачи всегда выполняются после синхронного кода, но до макрозадач
Promise.resolve().then(() => {
  console.log('Promise 1 (микрозадача)');
  
  // 5. Цепочка Promise - новая микрозадача, добавленная в микроочередь
  return Promise.resolve();
}).then(() => {
  console.log('Promise 2 (следующая микрозадача)');
});

// 4. Создаем еще одну независимую микрозадачу
Promise.resolve().then(() => {
  console.log('Promise 3 (еще одна микрозадача)');
});

console.log('Конец синхронного кода'); // 4. Выполнится сразу после первого console.log

/*
Порядок вывода будет такой:
1. "Старт программы" (синхронный код)
2. "Конец синхронного кода" (синхронный код)
3. "Promise 1 (микрозадача)" (первая микрозадача из очереди микрозадач)
4. "Promise 3 (еще одна микрозадача)" (следующая микрозадача из очереди)
5. "Promise 2 (следующая микрозадача)" (микрозадача из цепочки Promise)
6. "setTimeout 1 (макрозадача)" (первая макрозадача из очереди макрозадач)
7. "Promise внутри setTimeout (микрозадача после макрозадачи)" (микрозадача, созданная внутри макрозадачи)
8. "Вложенный setTimeout (новая макрозадача)" (новая макрозадача, добавленная в очередь)

Объяснение:
1. Сначала выполняется весь синхронный код - первый и последний console.log
2. Затем Event Loop проверяет очередь микрозадач и выполняет все микрозадачи из Promise
3. После опустошения очереди микрозадач, Event Loop переходит к первой макрозадаче (setTimeout)
4. При выполнении макрозадачи создаются новые микро- и макрозадачи
5. Сначала выполняется новая микрозадача внутри setTimeout, потом новая макрозадача
*/